import { ERRORCODE } from './constant';

export const ERROR_MESSAGE = (error: number) => {
  switch (error) {
    case ERRORCODE.NET_E_SUCCESS:
      return 'NET_E_SUCCESS';
    case ERRORCODE.NET_E_NOT_LOGINED:
      return 'NET_E_SUCCESS';
    case ERRORCODE.NET_E_EMPTY_TOKEN:
      return 'NET_E_EMPTY_TOKEN';
    case ERRORCODE.NET_E_EXPIRED_TOKEN:
      return 'NET_E_EXPIRED_TOKEN';
    case ERRORCODE.NET_E_INVALID_TOKEN:
      return 'NET_E_INVALID_TOKEN';
    case ERRORCODE.NET_E_DUPLICATE_LOGIN:
      return 'NET_E_DUPLICATE_LOGIN';
    case ERRORCODE.NET_E_ALREADY_DELETE_USER_ID:
      return 'NET_E_ALREADY_DELETE_USER_ID';
    case ERRORCODE.NET_E_ALREADY_EXIST_EMAIL:
      return 'NET_E_ALREADY_EXIST_EMAIL';
    case ERRORCODE.NET_E_ALREADY_EXIST_NICKNAME:
      return 'NET_E_ALREADY_EXIST_NICKNAME';
    case ERRORCODE.NET_E_ALREADY_MY_NICKNAME:
      return 'NET_E_ALREADY_MY_NICKNAME';
    case ERRORCODE.NET_E_NOT_MATCH_PASSWORD:
      return 'NET_E_NOT_MATCH_PASSWORD';
    case ERRORCODE.NET_E_NOT_EXIST_USER:
      return 'NET_E_NOT_EXIST_USER';
    case ERRORCODE.NET_E_NOT_MATCH_EMAIL_AUTH_CODE:
      return 'NET_E_NOT_MATCH_EMAIL_AUTH_CODE';
    case ERRORCODE.NET_E_NOT_EXIST_EMAIL:
      return 'NET_E_NOT_EXIST_EMAIL';
    case ERRORCODE.NET_E_SAME_PREVIOUS_EMAIL:
      return 'NET_E_SAME_PREVIOUS_EMAIL_';
    case ERRORCODE.NET_E_NOT_AUTH_EMAIL:
      return 'NET_E_NOT_AUTH_EMAIL';
    case ERRORCODE.NET_E_ALREADY_EXIST_EMAIL_FOR_ARZMETA_LOGIN:
      return 'NET_E_ALREADY_EXIST_EMAIL_FOR_ARZMETA_LOGIN';
    case ERRORCODE.NET_E_EMPTY_PASSWORD:
      return 'NET_E_EMPTY_PASSWORD';
    case ERRORCODE.NET_E_SOCIAL_LOGIN_USER:
      return 'NET_E_SOCIAL_LOGIN_USER';
    case ERRORCODE.NET_E_BAD_PASSWORD:
      return 'NET_E_BAD_PASSWORD';
    case ERRORCODE.NET_E_CANNOT_UPDATED_EMAIL:
      return 'NET_E_CANNOT_UPDATED_EMAIL';
    case ERRORCODE.NET_E_CANNOT_VOTE:
      return 'NET_E_CANNOT_VOTE';
    case ERRORCODE.NET_E_ALREADY_VOTE:
      return 'NET_E_ALREADY_VOTE';
    case ERRORCODE.NET_E_TOO_MANY_RESPONSE:
      return 'NET_E_TOO_MANY_RESPONSE';
    case ERRORCODE.NET_E_WRONG_RESPONSE:
      return 'NET_E_WRONG_RESPONSE';
    case ERRORCODE.NET_E_NOT_EXIST_VOTE:
      return 'NET_E_NOT_EXIST_VOTE';
    case ERRORCODE.NET_E_NOT_EXIST_PROGRESS_VOTE:
      return 'NET_E_NOT_EXIST_PROGRESS_VOTE';
    case ERRORCODE.NET_E_ALREADY_RECEIVED_FRIEND_REQUEST:
      return 'NET_E_ALREADY_RECEIVED_FRIEND_REQUEST';
    case ERRORCODE.NET_E_ALREADY_SEND_FRIEND_REQUEST:
      return 'NET_E_ALREADY_SEND_FRIEND_REQUEST';
    case ERRORCODE.NET_E_NOT_EXIST_RECEIVED_REQUEST:
      return 'NET_E_NOT_EXIST_RECEIVED_REQUEST';
    case ERRORCODE.NET_E_ALREADY_FRIEND:
      return 'NET_E_ALREADY_FRIEND';
    case ERRORCODE.NET_E_MEMBER_IS_BLOCK:
      return 'NET_E_MEMBER_IS_BLOCK';
    case ERRORCODE.NET_E_INVALID_EMAIL:
      return 'NET_E_INVALID_EMAIL';
    case ERRORCODE.NET_E_OVER_COUNT_EMAIL_AUTH:
      return 'NET_E_OVER_COUNT_EMAIL_AUTH';
    case ERRORCODE.NET_E_ALREADY_LINKED_ACCOUNT:
      return 'NET_E_ALREADY_LINKED_ACCOUNT';
    case ERRORCODE.NET_E_CANNOT_RELEASE_LINKED_ACCOUNT:
      return 'NET_E_CANNOT_RELEASE_LINKED_ACCOUNT';
    case ERRORCODE.NET_E_DB_FAILED:
      return 'NET_E_DB_FAILED';
    case ERRORCODE.NET_E_NOT_HAVE_ITEM:
      return 'NET_E_NOT_HAVE_ITEM';
    case ERRORCODE.NET_E_ITEM_OVER_COUNT:
      return 'NET_E_ITEM_OVER_COUNT';
    case ERRORCODE.NET_E_NOT_MATCH_ITEM:
      return 'NET_E_NOT_MATCH_ITEM';
    case ERRORCODE.NET_E_ITEM_NOT_REMOVABLE:
      return 'NET_E_ITEM_NOT_REMOVABLE';
    case ERRORCODE.NET_E_NOT_SET_RESERVATION_TIME:
      return 'NET_E_NOT_SET_RESERVATION_TIME';
    case ERRORCODE.NET_E_DUPLICATE_RESERVATION_TIME:
      return 'NET_E_DUPLICATE_RESERVATION_TIME';
    case ERRORCODE.NET_E_WRONG_RESERVATION_TIME:
      return 'NET_E_WRONG_RESERVATION_TIME';
    case ERRORCODE.NET_E_NOT_EXIST_REQUEST:
      return 'NET_E_NOT_EXIST_REQUEST';

    case ERRORCODE.NET_E_OFFICE_GRADE_AUTHORITY:
      return 'NET_E_OFFICE_GRADE_AUTHORITY';

    case ERRORCODE.NET_E_OVER_CREATE_OFFICE_RESERVATION_COUNT:
      return 'NET_E_OVER_CREATE_OFFICE_RESERVATION_COUNT';

    case ERRORCODE.NET_E_ERROR_SELECT_OFFICE_ROOM_INFO:
      return 'NET_E_ERROR_SELECT_OFFICE_ROOM_INFO';

    case ERRORCODE.NET_E_OVER_MAX_PERSONNEL:
      return 'NET_E_OVER_MAX_PERSONNEL';

    case ERRORCODE.NET_E_OVER_RUNNING_TIME:
      return 'NET_E_OVER_RUNNING_TIME';

    case ERRORCODE.NET_E_CANNOT_SET_THUMBNAIL:
      return 'NET_E_CANNOT_SET_THUMBNAIL';

    case ERRORCODE.NET_E_CANNOT_SET_ADVERTISING:
      return 'NET_E_CANNOT_SET_ADVERTISING';

    case ERRORCODE.NET_E_CANNOT_SET_WAITING_ROOM:
      return 'NET_E_CANNOT_SET_WAITING_ROOM';

    case ERRORCODE.NET_E_NOT_EXIST_OFFICE:
      return 'NET_E_NOT_EXIST_OFFICE';

    case ERRORCODE.NET_E_NOT_EXIST_WAITING:
      return 'NET_E_NOT_EXIST_WAITING';

    case ERRORCODE.NET_E_OFFICE_CREATE_ME:
      return 'NET_E_OFFICE_CREATE_ME';

    case ERRORCODE.NET_E_OVER_MAX_OFFICE_SET_OBSERVER:
      return 'NET_E_OVER_MAX_OFFICE_SET_OBSERVER';

    case ERRORCODE.NET_E_CANNOT_OFFICE_SET_OBSERVER:
      return 'NET_E_CANNOT_OFFICE_SET_OBSERVER';

    case ERRORCODE.NET_E_MAX_OVER_BUSINESS_CARD:
      return 'NET_E_MAX_OVER_BUSINESS_CARD';
    case ERRORCODE.NET_E_NOT_EXIST_BUSINESS_CARD:
      return 'NET_E_NOT_EXIST_BUSINESS_CARD';
    case ERRORCODE.NET_E_ERROR_BUSINESS_CARD_ID:
      return 'NET_E_ERROR_BUSINESS_CARD_ID';
    default:
      return '';
  }
};
